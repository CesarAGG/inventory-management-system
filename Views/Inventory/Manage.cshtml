@model InventoryManagementSystem.Models.Inventory

@{
    ViewData["Title"] = "Manage Inventory: " + Model.Name;
}

<h2>@ViewData["Title"]</h2>

<div>
    <a asp-action="Index" asp-controller="Home">Back to Home</a>
</div>
<hr />

<div class="row">
    <div class="col-md-12">
        <ul class="nav nav-tabs" id="inventoryTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="items-tab" data-bs-toggle="tab" data-bs-target="#items-tab-pane" type="button" role="tab" aria-controls="items-tab-pane" aria-selected="true">Items</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="fields-tab" data-bs-toggle="tab" data-bs-target="#fields-tab-pane" type="button" role="tab" aria-controls="fields-tab-pane" aria-selected="false">Fields</button>
            </li>
        </ul>

        <div class="tab-content" id="inventoryTabsContent">
            <!-- Items Tab Pane (Active by default) -->
            <div class="tab-pane fade show active" id="items-tab-pane" role="tabpanel" aria-labelledby="items-tab" tabindex="0">
                <form id="itemsForm" method="post">
                    <div class="card mt-3">
                        <div class="card-header bg-light">
                            <div class="d-flex align-items-center">
                                <h5 class="mb-0">Items Toolbar</h5>
                                <div class="ms-auto">
                                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#itemModal">Add New Item</button>
                                    <button type="button" class="btn btn-outline-secondary" id="editSelectedItemBtn" disabled>Edit Selected</button>
                                    <button type="button" class="btn btn-danger" id="deleteSelectedItemsBtn">Delete Selected</button>
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="row justify-content-center">
                                <div class="col-auto table-responsive">
                                    <table class="table table-hover mb-0" id="itemsDataTable">
                                        <thead id="items-table-head"></thead>
                                        <tbody id="items-table-body"></tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>

            <!-- Fields Tab Pane -->
            <div class="tab-pane fade" id="fields-tab-pane" role="tabpanel" aria-labelledby="fields-tab" tabindex="0">
                <div class="card card-body mt-3">
                    <div class="row">
                        <div class="col-md-8">
                            <form id="fieldsForm" method="post">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="inventoryId" value="@Model.Id" />

                                <!-- Fields Toolbar -->
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h5 class="mb-0">Current Fields</h5>
                                    <div>
                                        <button type="button" class="btn btn-outline-secondary" id="editSelectedFieldBtn" disabled>Edit Selected</button>
                                        <button type="button" class="btn btn-danger" id="deleteSelectedFieldsBtn">Delete Selected</button>
                                    </div>
                                </div>
                                <p class="text-muted small">Drag and drop rows to reorder.</p>

                                <!-- Fields List -->
                                <ul id="fields-list" class="list-group"></ul>
                            </form>
                        </div>
                        <div class="col-md-4">
                            <h5>Add New Field</h5>
                            <div class="card">
                                <div class="card-body">
                                    <div class="form-group mb-3">
                                        <label for="newFieldName" class="form-label">Field Name</label>
                                        <input type="text" id="newFieldName" class="form-control" />
                                    </div>
                                    <div class="form-group mb-3">
                                        <label for="newFieldType" class="form-label">Field Type</label>
                                        <select id="newFieldType" class="form-select">
                                            <option value="String">Single-line text</option>
                                            <option value="Text">Multi-line text</option>
                                            <option value="Numeric">Number</option>
                                            <option value="Bool">Checkbox (Yes/No)</option>
                                            <option value="FileUrl">Document/Image URL</option>
                                        </select>
                                    </div>
                                    <button type="button" id="addFieldBtn" class="btn btn-primary w-100">Add Field</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modals -->
<!-- Add/Edit Item Modal -->
<div class="modal fade" id="itemModal" tabindex="-1" aria-labelledby="itemModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="itemModalLabel">Add New Item</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="itemForm">
                <input type="hidden" id="itemId" name="Id" />
                <div class="modal-body">
                    <!-- Form fields will be dynamically generated here -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- View Content Modal -->
<div class="modal fade" id="viewContentModal" tabindex="-1" aria-labelledby="viewContentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="viewContentModalLabel">Field Content</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <pre id="viewContentModalBody" style="white-space: pre-wrap; word-wrap: break-word;"></pre>
            </div>
        </div>
    </div>
</div>

<!-- Delete Items Confirmation Modal -->
<div class="modal fade" id="deleteItemsConfirmModal" tabindex="-1" aria-labelledby="deleteItemsConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="deleteItemsConfirmModalLabel">Confirm Deletion</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete the selected items? This action cannot be undone.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteItemsBtn">Delete</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Fields Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="deleteConfirmModalLabel">Confirm Deletion</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this custom field? This action cannot be undone.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Field Modal -->
<div class="modal fade" id="editFieldModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Field Name</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="editFieldForm">
                <div class="modal-body">
                    <input type="hidden" id="editFieldId" />
                    <div class="form-group">
                        <label for="editFieldNameInput" class="form-label">New Name</label>
                        <input type="text" class="form-control" id="editFieldNameInput" required>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .expandable-cell .truncated-text {
            cursor: pointer;
            text-decoration: underline;
            text-decoration-style: dotted;
        }

        #items-table-body td,
        #items-table-head th {
            white-space: nowrap;
        }

        .unselectable {
            -webkit-user-select: none; /* Safari */
            -ms-user-select: none; /* IE 10+ and Edge */
            user-select: none; /* Standard syntax */
        }

        #items-table-head th .truncated-text {
            cursor: default; /* Use default cursor for headers */
            text-decoration: underline;
            text-decoration-style: dotted;
        }

        .form-control.is-invalid:focus, .form-select.is-invalid:focus {
            border-color: #dc3545 !important;
            box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25) !important;
            outline: 0 !important;
        }
    </style>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // --- Common variables ---
            const inventoryId = document.querySelector('input[name="inventoryId"]').value;
            const csrfToken = document.querySelector('input[name="__RequestVerificationToken"]').value;
            let itemsDataTable = null;

            // --- Toast Function & escapeHtml ---
            function showToast(message, isError = false) {
                const toastContainer = document.querySelector('.toast-container');
                const toastId = 'toast-' + Math.random().toString(36).substr(2, 9);
                const toastHtml = `
                                        <div id="${toastId}" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                                            <div class="toast-header ${isError ? 'bg-danger text-white' : 'bg-success text-white'}">
                                                <strong class="me-auto">${isError ? 'Error' : 'Success'}</strong>
                                                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
                                            </div>
                                            <div class="toast-body">${escapeHtml(message)}</div>
                                        </div>`;
                toastContainer.insertAdjacentHTML('beforeend', toastHtml);
                const toastElement = document.getElementById(toastId);
                const toast = new bootstrap.Toast(toastElement, { delay: 3000 });
                toast.show();
                toastElement.addEventListener('hidden.bs.toast', () => toastElement.remove());
            }
            function escapeHtml(unsafe) {
                return unsafe.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
            }

            // --- Fields Tab Logic ---
            const fieldsList = document.getElementById('fields-list');
            const addFieldBtn = document.getElementById('addFieldBtn');
            const newFieldNameInput = document.getElementById('newFieldName');
            const newFieldTypeSelect = document.getElementById('newFieldType');
            const deleteFieldModal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
            const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
            const deleteSelectedFieldsBtn = document.getElementById('deleteSelectedFieldsBtn');
            const editSelectedFieldBtn = document.getElementById('editSelectedFieldBtn');
            const editFieldModal = new bootstrap.Modal(document.getElementById('editFieldModal'));
            const editFieldForm = document.getElementById('editFieldForm');
            const editFieldIdInput = document.getElementById('editFieldId');
            const editFieldNameInput = document.getElementById('editFieldNameInput');
            let fieldsToDeleteIds = [];

            editFieldForm.addEventListener('submit', function (e) {
                e.preventDefault();
                const fieldId = editFieldIdInput.value;
                const newName = editFieldNameInput.value;
                updateFieldName(fieldId, newName);
                editFieldModal.hide();
            });

            function refreshAllData() {
                if (itemsDataTable) {
                    itemsDataTable.destroy();
                    itemsDataTable = null;
                }
                fetchItemsAndSchema();
            }
            async function fetchFields() {
                const response = await fetch(`/api/inventory/${inventoryId}/fields`);
                if (!response.ok) { showToast('Failed to load fields.', true); return; }
                const fields = await response.json();
                renderFields(fields);
            }
            async function addField() {
                const name = newFieldNameInput.value.trim();
                const type = newFieldTypeSelect.value;
                if (!name) { showToast('Field name cannot be empty.', true); return; }
                const response = await fetch(`/api/inventory/${inventoryId}/fields`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': csrfToken },
                    body: JSON.stringify({ name: name, type: type })
                });
                if (response.ok) {
                    newFieldNameInput.value = '';
                    showToast('Field added successfully.');
                    fetchFields();

                    refreshAllData();
                } else {
                    const errorText = await response.text();
                    showToast(`Failed to add field: ${errorText}`, true);
                }
            }
            async function deleteSelectedFields() {
                if (fieldsToDeleteIds.length === 0) return;

                const response = await fetch('/api/inventory/fields/delete', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': csrfToken },
                    body: JSON.stringify(fieldsToDeleteIds) // Send the array directly
                });

                deleteFieldModal.hide();

                if (response.ok) {
                    showToast('Selected fields deleted successfully.');
                    fetchFields();

                    refreshAllData();
                } else {
                    showToast('Failed to delete selected fields.', true);
                }
                fieldsToDeleteIds = [];
            }
            async function updateFieldName(fieldId, newName) {
                const response = await fetch(`/api/inventory/fields/${fieldId}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': csrfToken },
                    body: JSON.stringify({ name: newName, type: '' })
                });
                if (response.ok) { showToast('Field renamed successfully.'); fetchFields(); }
                else { showToast('Failed to rename field.', true); }
            }
            async function reorderFields(orderedIds) {
                const response = await fetch(`/api/inventory/${inventoryId}/fields/reorder`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': csrfToken },
                    body: JSON.stringify(orderedIds)
                });
                if (!response.ok) { showToast('Failed to save new order.', true); }
            }
            function renderFields(fields) {
                fieldsList.innerHTML = '';
                const systemFields = [{ name: 'Item ID', type: 'System ID (Read-Only)' }, { name: 'Created At', type: 'System Date (Read-Only)' }];
                systemFields.forEach(sf => {
                    const li = document.createElement('li');
                    li.className = 'list-group-item d-flex align-items-center disabled bg-light';
                    li.innerHTML = `<div class="flex-grow-1"><strong>${escapeHtml(sf.name)}</strong><small class="text-muted d-block">${escapeHtml(sf.type)}</small></div>`;
                    fieldsList.appendChild(li);
                });
                fields.forEach(field => {
                    const li = document.createElement('li');
                    li.className = 'list-group-item d-flex align-items-center';
                    li.dataset.id = field.id;
                    const fieldName = escapeHtml(field.name);
                    let nameHtml = fieldName;
                    if (fieldName.length > 35) { nameHtml = `<span class="truncated-text" title="${fieldName}">${fieldName.substring(0, 32)}<span class="unselectable">...</span></span>`; }
                    li.innerHTML = `
                                <input class="form-check-input me-2" type="checkbox" value="${field.id}" name="selectedFieldIds">
                                <span class="drag-handle" style="cursor: move; margin-right: 10px;">&#9776;</span>
                                <div class="flex-grow-1" style="min-width: 0;">
                                    <strong class="d-block text-truncate field-name" data-field-id="${field.id}">${nameHtml}</strong>
                                    <small class="text-muted d-block">${escapeHtml(field.type)}</small>
                                </div>`;
                    fieldsList.appendChild(li);
                });
            }

            new Sortable(fieldsList, { animation: 150, handle: '.drag-handle', onEnd: () => reorderFields(Array.from(fieldsList.querySelectorAll('li[data-id]')).map(item => item.dataset.id)) });
            addFieldBtn.addEventListener('click', addField);
            confirmDeleteBtn.addEventListener('click', deleteSelectedFields);
            editSelectedFieldBtn.addEventListener('click', () => {
                const selectedCheckbox = document.querySelector('input[name="selectedFieldIds"]:checked');
                if (!selectedCheckbox) return;

                const fieldNameSpan = selectedCheckbox.closest('li').querySelector('.field-name');
                const currentName = fieldNameSpan.textContent.trim().replace('...', '');

                editFieldIdInput.value = selectedCheckbox.value;
                editFieldNameInput.value = currentName;
                editFieldModal.show();
            });

            const fieldSelectionChangeHandler = () => {
                const selectedCount = document.querySelectorAll('input[name="selectedFieldIds"]:checked').length;
                if (selectedCount === 1) {
                    editSelectedFieldBtn.disabled = false;
                    editSelectedFieldBtn.classList.replace('btn-outline-secondary', 'btn-secondary');
                } else {
                    editSelectedFieldBtn.disabled = true;
                    editSelectedFieldBtn.classList.replace('btn-secondary', 'btn-outline-secondary');
                }
            };
            fieldsList.addEventListener('change', fieldSelectionChangeHandler);

            // --- Items Tab Logic ---
            const itemsTableHead = document.getElementById('items-table-head');
            const itemsTableBody = document.getElementById('items-table-body');
            const itemForm = document.getElementById('itemForm');
            const itemModalEl = document.getElementById('itemModal');
            const itemModal = new bootstrap.Modal(itemModalEl);
            const itemModalLabel = document.getElementById('itemModalLabel');
            const itemIdInput = document.getElementById('itemId');
            const editSelectedItemBtn = document.getElementById('editSelectedItemBtn');
            const deleteSelectedItemsBtn = document.getElementById('deleteSelectedItemsBtn');
            const deleteItemsModal = new bootstrap.Modal(document.getElementById('deleteItemsConfirmModal'));
            const confirmDeleteItemsBtn = document.getElementById('confirmDeleteItemsBtn');
            const viewContentModal = new bootstrap.Modal(document.getElementById('viewContentModal'));
            const viewContentModalLabel = document.getElementById('viewContentModalLabel');
            const viewContentModalBody = document.getElementById('viewContentModalBody');
            let itemSchema = [];

            async function fetchItemsAndSchema() {
                const response = await fetch(`/api/inventory/${inventoryId}/items-data`);
                if (!response.ok) { showToast('Failed to load items.', true); return; }
                const data = await response.json();
                itemSchema = data.fields;
                renderItemsUI(itemSchema, data.items);
            }
            function renderItemsUI(fields, items) {
                // Render table headers
                let headersHtml = `<tr><th style="width: 50px;"><input class="form-check-input" type="checkbox" id="selectAllItemsCheckbox" /></th>
                                       <th style="width: 120px;">Item ID</th>
                                       <th style="width: 180px;">Created At</th>`;

                fields.forEach(f => {
                    const fieldName = escapeHtml(f.name);
                    if (fieldName.length > 35) {
                        headersHtml += `<th title="${fieldName}">
                                            <span class="truncated-text">
                                                ${fieldName.substring(0, 32)}<span class="unselectable">...</span>
                                            </span>
                                        </th>`;
                    } else {
                        headersHtml += `<th>${fieldName}</th>`;
                    }
                });

                itemsTableHead.innerHTML = headersHtml + `</tr>`;

                // Render table body
                let allRowsHtml = '';
                items.forEach(item => {
                    const createdAt = new Date(item.createdAt).toLocaleString(undefined, { dateStyle: 'medium', timeStyle: 'short' });
                    const truncatedId = item.id.substring(0, 8);
                    let rowHtml = `<tr><td><input class="form-check-input item-checkbox" type="checkbox" name="selectedItemIds" value="${item.id}" /></td>
                                       <td class="expandable-cell" data-field-name="Item ID" data-content="${escapeHtml(item.id)}">
                                           <span class="truncated-text font-monospace">${truncatedId}<span class="unselectable">...</span></span>
                                       </td>
                                       <td>${escapeHtml(createdAt)}</td>`;

                    fields.forEach(f => {
                        const value = item.fields[f.targetColumn];
                        let displayValue;
                        let cellClass = '';

                        if (f.type === 'Bool') {
                            displayValue = value === true ? '✔️' : '❌';
                        } else {
                            const stringValue = String(value ?? '');

                            if (f.type === 'Text') {
                                if (stringValue.length > 35) {
                                    displayValue = `<pre class="mb-0 truncated-text">${escapeHtml(stringValue.substring(0, 32))}...</pre>`;
                                    cellClass = 'expandable-cell';
                                } else {
                                    displayValue = `<pre class="mb-0">${escapeHtml(stringValue)}</pre>`;
                                }
                            }
                            if (['String', 'Text', 'FileUrl'].includes(f.type) && stringValue.length > 35) {
                                displayValue = `<span class="truncated-text">${escapeHtml(stringValue.substring(0, 32))}<span class="unselectable">...</span></span>`;
                                cellClass = 'expandable-cell';
                            } else {
                                displayValue = escapeHtml(stringValue);
                            }
                        }

                        rowHtml += `<td class="${cellClass}" data-field-name="${escapeHtml(f.name)}" data-content="${escapeHtml(String(value ?? ''))}">${displayValue}</td>`;
                    });
                    allRowsHtml += rowHtml + '</tr>';
                });

                itemsTableBody.innerHTML = allRowsHtml;

                const itemModalBody = document.querySelector('#itemModal .modal-body');
                let formHtml = '';
                fields.forEach(field => {
                    formHtml += `<div class="mb-3">
                                                <label for="item-field-${field.id}" class="form-label">${escapeHtml(field.name)}</label>`;

                    switch (field.type) {
                        case 'Text':
                            formHtml += `<textarea class="form-control" id="item-field-${field.id}" name="${field.id}"></textarea>`;
                            break;
                        case 'Bool':
                            formHtml += `<div class="form-check form-switch"><input class="form-check-input" type="checkbox" id="item-field-${field.id}" name="${field.id}"></div>`;
                            break;
                        case 'Numeric':
                            formHtml += `<input type="number" step="any" class="form-control" id="item-field-${field.id}" name="${field.id}">`;
                            break;
                        default: // String, FileUrl
                            formHtml += `<input type="text" class="form-control" id="item-field-${field.id}" name="${field.id}">`;
                    }
                    formHtml += `</div>`;
                });
                itemModalBody.innerHTML = formHtml;

                if (itemsDataTable) {
                    itemsDataTable.destroy();
                }
                itemsDataTable = new DataTable('#itemsDataTable', {
                    order: [[2, 'desc']] // "Created At" is the 3rd column (index 2)
                });
            }
            function openItemModal(itemData = null) {
                itemForm.reset();
                itemForm.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
                itemForm.querySelectorAll('.invalid-feedback').forEach(el => el.remove());

                if (itemData) { // Edit Mode
                    itemModalLabel.textContent = 'Edit Item';
                    itemIdInput.value = itemData.id;

                    itemSchema.forEach(field => {
                        const input = itemForm.querySelector(`[name="${field.id}"]`);
                        if (input) {
                            const value = itemData.fields[field.targetColumn];
                            if (field.type === 'Bool') {
                                input.checked = value === true;
                            } else {
                                input.value = value ?? '';
                            }
                        }
                    });
                } else { // Add Mode
                    itemModalLabel.textContent = 'Add New Item';
                    itemIdInput.value = '';
                }
                itemModal.show();
            }
            async function saveItem() {
                const itemId = itemIdInput.value;
                const isEditing = !!itemId;
                const formData = new FormData(itemForm);
                const fieldValues = {};
                itemSchema.forEach(field => {
                    if (field.type === 'Bool') {
                        fieldValues[field.id] = formData.has(field.id);
                    } else {
                        fieldValues[field.id] = formData.get(field.id);
                    }
                });

                const apiUrl = isEditing ? `/api/inventory/items/${itemId}` : `/api/inventory/${inventoryId}/items`;
                const response = await fetch(apiUrl, {
                    method: isEditing ? 'PUT' : 'POST',
                    headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': csrfToken },
                    body: JSON.stringify({ fieldValues: fieldValues })
                });

                if (response.ok) {
                    showToast(`Item ${isEditing ? 'updated' : 'added'} successfully.`);
                    itemModal.hide();
                    fetchItemsAndSchema();
                } else if (response.status === 400) {
                    const errors = await response.json();

                    itemForm.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
                    itemForm.querySelectorAll('.invalid-feedback').forEach(el => el.remove());

                    for (const fieldId in errors) {
                        const errorMessage = errors[fieldId];
                        const input = itemForm.querySelector(`[name="${fieldId}"]`);
                        if (input) {
                            input.classList.add('is-invalid');
                            const errorDiv = document.createElement('div');
                            errorDiv.className = 'invalid-feedback';
                            errorDiv.textContent = errorMessage;
                            input.parentElement.appendChild(errorDiv);
                        }
                    }
                    showToast('Please correct the highlighted errors.', true);
                } else {
                    showToast(`Failed to ${isEditing ? 'update' : 'add'} item.`, true);
                }
            }
            async function deleteSelectedItems() {
                const selectedCheckboxes = document.querySelectorAll('.item-checkbox:checked');
                const itemIds = Array.from(selectedCheckboxes).map(cb => cb.value);
                const response = await fetch('/api/inventory/items/delete', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': csrfToken },
                    body: JSON.stringify(itemIds)
                });
                deleteItemsModal.hide();
                if (response.ok) { showToast('Selected items deleted.', true); fetchItemsAndSchema(); }
                else { showToast('Failed to delete items.', true); }
            }

            // --- Event Handlers ---
            document.querySelector('button[data-bs-target="#itemModal"]').addEventListener('click', () => openItemModal());
            itemForm.addEventListener('submit', (e) => { e.preventDefault(); saveItem(); });

            editSelectedItemBtn.addEventListener('click', async () => {
                const selectedCheckbox = document.querySelector('.item-checkbox:checked');
                if (!selectedCheckbox) return;

                const response = await fetch(`/api/inventory/items/${selectedCheckbox.value}`);
                if (!response.ok) {
                    showToast('Error fetching item details.', true);
                    return;
                }
                const itemData = await response.json();
                openItemModal(itemData);
            });
            deleteSelectedFieldsBtn.addEventListener('click', () => {
                fieldsToDeleteIds = Array.from(document.querySelectorAll('input[name="selectedFieldIds"]:checked')).map(cb => cb.value);
                if (fieldsToDeleteIds.length === 0) {
                    showToast('Please select fields to delete.', true);
                    return;
                }
                deleteFieldModal.show();
            });
            deleteSelectedItemsBtn.addEventListener('click', () => { if (document.querySelectorAll('.item-checkbox:checked').length === 0) { showToast('Please select items to delete.', true); return; } deleteItemsModal.show(); });
            confirmDeleteItemsBtn.addEventListener('click', deleteSelectedItems);
            const selectionChangeHandler = () => {
                const selectedCount = document.querySelectorAll('.item-checkbox:checked').length;
                if (selectedCount === 1) {
                    editSelectedItemBtn.disabled = false;
                    editSelectedItemBtn.classList.remove('btn-outline-secondary');
                    editSelectedItemBtn.classList.add('btn-secondary'); // A more vibrant, solid color
                } else {
                    editSelectedItemBtn.disabled = true;
                    editSelectedItemBtn.classList.remove('btn-secondary');
                    editSelectedItemBtn.classList.add('btn-outline-secondary');
                }
            };
            itemsTableBody.addEventListener('change', selectionChangeHandler);
            itemsTableHead.addEventListener('change', e => { if (e.target.id === 'selectAllItemsCheckbox') { document.querySelectorAll('.item-checkbox').forEach(cb => cb.checked = e.target.checked); selectionChangeHandler(); } });
            itemsTableBody.addEventListener('click', e => { if (e.target.closest('.expandable-cell')) { const cell = e.target.closest('.expandable-cell'); viewContentModalLabel.textContent = cell.dataset.fieldName; viewContentModalBody.textContent = cell.dataset.content; viewContentModal.show(); } });

            // --- Tab Loading Logic ---
            const fieldsTabEl = document.getElementById('fields-tab');
            const itemsTabEl = document.getElementById('items-tab');

            const loadTabData = () => {
                if (itemsTabEl.classList.contains('active')) fetchItemsAndSchema();
                else if (fieldsTabEl.classList.contains('active')) fetchFields();
            };
            itemsTabEl.addEventListener('shown.bs.tab', () => fetchItemsAndSchema());
            fieldsTabEl.addEventListener('shown.bs.tab', () => fetchFields());

            loadTabData();
        });
    </script>
}